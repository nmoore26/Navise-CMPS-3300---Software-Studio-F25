package com.example.navisewebsite.domain;

import java.util.ArrayList;
import java.util.List;

public class Student extends Account {
    private final String tulaneID;
    private final String studentName;
    private List<String> currentCourses;
    private List<String> pastCourses;
    private List<String> plannedSchedule;
    private String major;
    private String minor;
    
    public Student(String email, String storedPassword, String tulaneID, 
                   String studentName, List<String> currentCourses, 
                   List<String> pastCourses, List<String> plannedSchedule, 
                   String major, String minor) {
        super(email, storedPassword);
        this.tulaneID = tulaneID;
        this.studentName = studentName;
        this.currentCourses = (currentCourses != null) ? new ArrayList<>(currentCourses) : new ArrayList<>();
        this.pastCourses = (pastCourses != null) ? new ArrayList<>(pastCourses) : new ArrayList<>();
        this.plannedSchedule = (plannedSchedule != null) ? new ArrayList<>(plannedSchedule) : new ArrayList<>();
        this.major = major;
        this.minor = minor;
    }
    
    // Constructor with default empty lists for optional parameters
    public Student(String email, String storedPassword, String tulaneID, 
                   String studentName, String major, String minor) {
        this(email, storedPassword, tulaneID, studentName, 
             new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), major, minor);
    }
    
    // Constructor with only required parameters
    public Student(String email, String storedPassword, String tulaneID, 
                   String studentName) {
        this(email, storedPassword, tulaneID, studentName, 
             new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), null, null);
    }
    
    @Override
    protected void authorize() {
        // Student-specific authorization logic
        System.out.println("Authorizing student access...");
    }
    
    @Override
    protected String postLogin() {
        // Student-specific post-login logic
        return "Student dashboard for: " + studentName;
    }
    
    public String getMajor() {
        return major;
    }
    
    public String getMinor() {
        return minor;
    }
    
    // Getters
    public String getTulaneID() {
        return tulaneID;
    }
    
    public String getStudentName() {
        return studentName;
    }
    
    public List<String> getCurrentCourses() {
        return new ArrayList<>(currentCourses);
    }
    
    public List<String> getPastCourses() {
        return new ArrayList<>(pastCourses);
    }
    
    public List<String> getPlannedSchedule() {
        return new ArrayList<>(plannedSchedule);
    }
    
    // Setters for mutable fields
    public void setCurrentCourses(List<String> currentCourses) {
        this.currentCourses = new ArrayList<>(currentCourses);
    }
    
    public void setPastCourses(List<String> pastCourses) {
        this.pastCourses = new ArrayList<>(pastCourses);
    }
    
    public void setPlannedSchedule(List<String> plannedSchedule) {
        this.plannedSchedule = new ArrayList<>(plannedSchedule);
    }
    
    public void setMajor(String major) {
        this.major = major;
    }
    
    public void setMinor(String minor) {
        this.minor = minor;
    }
}
package com.example.navisewebsite.domain;

public class Admin extends Account {
    private final String tulaneID;
    
    public Admin(String email, String storedPassword, String tulaneID) {
        super(email, storedPassword);
        this.tulaneID = tulaneID;
    }
    
    @Override
    protected void authorize() {
        // Admin-specific authorization logic
        System.out.println("Authorizing admin access...");
    }
    
    @Override
    protected String postLogin() {
        // Admin-specific post-login logic
        return "Admin dashboard for: " + getEmail();
    }
    
    public void updateCourse(Course course) {
        System.out.println("Course updated: " + course.getCourseName());
    }
    
    public String getTulaneID() {
        return tulaneID;
    }
}
package com.example.navisewebsite.domain;

// Assuming Course class exists for the Admin's updateCourse method
public class Course {
    private String courseName;
    
    public Course(String courseName) {
        this.courseName = courseName;
    }
    
    public String getCourseName() {
        return courseName;
    }
    
    public void setCourseName(String courseName) {
        this.courseName = courseName;
    }
}
